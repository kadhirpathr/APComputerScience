1. Which of the following is a reason to use an ArrayList instead of an array?
Ans: D
A. A list will always use less memory than an array.
B. A list can store objects, but arrays can only store primitive types.
C. A list has faster access to the last element than an array.
D. A list resizes itself as necessary as items are added, but an array does not.

2. Which of the following is true about import statements?
Ans: C 
A. You can only have one import statement in a source file.
B. You must specify the class to import.
C. Import statements must be before other code in a Java source file.
D. You must import java.lang.String to use the short name of String.

3. Which of the following is the correct way to create an ArrayList of integers?
Ans: D
A. ArrayList[int] numbers = new ArrayList();
B. ArrayList<String> numbers = new ArrayList();
C. ArrayList<int> numbers = new ArrayList<int>();
D. ArrayList<Integer> numbers = new ArrayList<Integer>();

4. Array and ArrayList are exactly the same except that Arrays are fixed size, but ArrayLists can grow in size.

5. Create a Digit class that takes an Integer as argument and stores the digits in the integer in ArrayList.
    e.g: Digits(123) creates are ArrayList with digits 1,2,3
   Write and invoke printDigits method to oop through the array using for-each loop and print the digits
Ans: 
import java.util.*;
public class Digits {
    private ArrayList<Integer> digits = new ArrayList<Integer>();
    public Digits(int i) {
        while (i > 0) {
            int d = i % 10;
            i /= 10;
            digits.add(d);
        }
    }
    public void printDigits() {
        for (Integer i : digits) {
            System.out.println(i);
        }
    }
    public static void main(String[] args) {
        Digits d = new Digits(123);
        d.printDigits();
    }
}

6. What will print when the following code executes?
ArrayList<Integer> list1 = new ArrayList<Integer>();
list1.add(1);
list1.add(2);
list1.add(3);
list1.add(2, 4);
list1.add(5);
System.out.println(list1);
Ans: C
A. [1, 2, 3, 4, 5]
B. [1, 4, 2, 3, 5]
C. [1, 2, 4, 3, 5]
D. [1, 2, 4, 5]

7. What will print when the following code executes?
ArrayList<String> list1 = new ArrayList<String>();
list1.add("Anaya");
list1.add("Layla");
list1.add("Sharrie");
list1.add(1, "Sarah");
System.out.println(list1);
Ans: A
A. ["Anaya", "Sarah", "Layla", "Sharrie"]
B. ["Anaya", "Layla", "Sharrie", "Sarah"]
C. ["Sarah", "Anaya", "Layla", "Sharrie"]
D. ["Anaya", "Layla", "Sarah", "Sharrie"]

8. What will print when the following code executes?
List<Integer> list1 = new ArrayList<Integer>();
list1.add(1);
list1.add(2);
list1.add(3);
list1.remove(2);
System.out.println(list1);
Ans: C
A. [2, 3]
B. [1, 2, 3]
C. [1, 2]
D. [1, 3]

9. What will print when the following code executes?
List<Integer> list1 = new ArrayList<Integer>();
list1.add(1);
list1.add(2);
list1.add(3);
list1.set(2, 4);
list1.add(2, 5);
list1.add(6);
System.out.println(list1);
Ans: C 
A. [1, 2, 3, 4, 5]
B. [1, 2, 4, 5, 6]
C. [1, 2, 5, 4, 6]
D. [1, 5, 2, 4, 6]

10. What will print when the following code executes?
List<String> list1 = new ArrayList<String>();
list1.add("Anaya");
list1.add("Layla");
list1.add("Sharrie");
list1.set(1, "Destini");
list1.add(1, "Sarah");
System.out.println(list1);
Ans: D
A. ["Sarah", "Destini", "Layla", "Sharrie"]
B. ["Sarah", "Destini", "Anaya", "Layla", "Sharrie"]
C. ["Anaya", "Sarah", "Sharrie"]
D. ["Anaya", "Sarah", "Destini", "Sharrie"]

11. Assume that nums has been created as an ArrayList object and it initially contains the following Integer values [0, 0, 4, 2, 5, 0, 3, 0]. What will nums contain as a result of executing numQuest?
ArrayList<Integer> list1 = new ArrayList<Integer>();
private ArrayList<Integer> nums;

// precondition: nums.size() > 0;
// nums contains Integer objects
public void numQuest()
{
   int k = 0;
   Integer zero = new Integer(0);
   while (k < nums.size())
   {
      if (nums.get(k).equals(zero))
         nums.remove(k);
      k++;
   }
}
Ans: A
A. [0, 4, 2, 5, 3]
B. [3, 5, 2, 4, 0, 0, 0, 0]
C. [0, 0, 0, 0, 4, 2, 5, 3]
D. [4, 2, 5, 3]

12. What will print when the following code executes?
List<Integer> numList = new ArrayList<Integer>();
numList.add(new Integer(1));
numList.add(new Integer(2));
numList.add(new Integer(3));
numList.set(2,new Integer(4));
numList.add(1, new Integer(5));
numList.add(new Integer(6));
System.out.println(numList);
Ans: D 
A. [1, 2, 3, 4, 5]
B. [1, 2, 4, 5, 6]
C. [1, 2, 5, 4, 6]
D. [1, 5, 2, 4, 6]

13. What will print when the following code executes?
List<Integer> list1 = new ArrayList<Integer>();
list1.add(new Integer(1));
list1.add(new Integer(2));
list1.add(new Integer(3));
list1.remove(1);
System.out.println(list1);
Ans: 
A. [2, 3]
B. [1, 2, 3]
C. [1, 2]
D. [1, 3]

14. The following code is supposed to initialize the ArrayList arr to [0,1,2,3,4] and then remove every other element to get [1,3].
However, there is problem in the code. Troubleshoot and fix the code.
import java.util.*;
public class ArrayListLoop
{
 public static void main(String[] args)
 {
   ArrayList<Integer> arr = new ArrayList<Integer>();
   for(int i=0; i < 10; i++)
   {
      arr.add(i);

   }
   for(int i=0; i < arr.size(); i++)
   {
      if (i % 2 == 0)
      {
         System.out.println("Removing element " + i + " : " + arr.get(i));
         arr.remove(i);
      }
   }
   System.out.println(arr);
 }
}
Ans:
import java.util.*;

public class ArrayListLoop
{
 public static void main(String[] args)
 {
   ArrayList<Integer> arr = new ArrayList<Integer>();
   for(int i=0; i < 10; i++)
   {
      arr.add(i);

   }
   boolean remainderCheck = true;
   for(int i=0; i < arr.size(); i++)
   {
      if (remainderCheck) {
            if (i % 2 == 0)
            {
                System.out.println("Removing element " + i + " : " + arr.get(i));
                arr.remove(i);
                remainderCheck = !remainderCheck;
            }
      } else {
            if (i % 2 == 1)
            {
                System.out.println("Removing element " + i + " : " + arr.get(i));
                arr.remove(i);
                remainderCheck = !remainderCheck;
            }          
      }
          
   }
   System.out.println(arr);
 }
}

15. Which will cause the longest execution of a sequential search looking for a value in an array of integers?
Ans: D
A. The value is the first one in the array
B. The value is in the middle of the array
C. The value is the last one in the array
D. The value isn't in the array

16. Which will cause the shortest execution of a sequential search looking for a value in an array of integers?
Ans: A
A. The value is the first one in the array
B. The value is in the middle of the array
C. The value is the last one in the array
D. The value isn't in the array

17. Which will cause the shortest execution of a binary search looking for a value in an array of integers?
Ans: B 
A. The value is the first one in the array
B. The value is in the middle of the array
C. The value is the last one in the array
D. The value isn't in the array

18. Which of the following conditions must be true in order to search for a value using binary search?
I. The values in the array must be integers.
II. The values in the array must be in sorted order.
III. The array must not contain duplicate values.
Ans: C 
A. I only
B. I and II
C. II only
D. II and III

19. How many times would the loop in the binary search run for an array int[] arr = {2, 10, 23, 31, 55, 86} with binarySearch(arr,55)?
Ans: A
A. 2
B. 1
C. 3

20.  If you had an ordered array of size 500, what is the maximum number of iterations required to find an element with binary search?
Ans: B
A. approximately 15 times
B. approximately 9 times
C. 500 times
D. 2 times

21. Under what condition will a selection sort execute faster?
Ans: C
A. If the data is already sorted in ascending order
B. If the data is already sorted in descending order
C. It will always take the same amount of time to execute

22. This method should sort the numbers in the passed array into ascending order. But, it does not work. Which of the following lines is wrong?
public static void selectionSort(int[] elements)
{
  for (int j = 0; j < elements.length âˆ’ 1; j++)      // line 1
  {
     int minIndex = j;                               // line 2
     for (int k = 0; k < elements.length; k++)       // line 3
     {
        if (elements[k] < elements[minIndex])        // line 4
        {
           minIndex = k;                             // line 5
        }
     }
     int temp = elements[j];
     elements[j] = elements[minIndex];
     elements[minIndex] = temp;
   }
}
Ans: C
A. line 1
B. line 2
C. line 3
D. line 4
E. line 5

23. Under what condition will an insertion sort execute faster?
Ans: A
A. If the data is already sorted in ascending order
B. If the data is already sorted in descending order
C. It will always take the same amount of time to execute

24. This method should sort the numbers in the passed array into ascending order. But, it does not work. Which of the following lines is wrong?
public static void insertionSort(int[] elements)
{
  for (int j = 1; j < elements.length - 1; j++)                       // line 1
  {
     int temp = elements[j];                                          // line 2
     int possibleIndex = j;                                           // line 3
     while (possibleIndex > 0 && temp < elements[possibleIndex - 1])  // line 4
     {
        elements[possibleIndex] = elements[possibleIndex - 1];        // line 5
        possibleIndex--;
     }
     elements[possibleIndex] = temp;
  }
}
Ans: A 
A. line 1
B. line 2
C. line 3
D. line 4
E. line 5

25. Drag the concept to the correct description
The number of elements in the list => size()
The index of the last element => size()-1
The index of the first element => 0
Index of the second element => 1

26. Drag the concept to the correct description
Get the first object in a list named list1 => list1.get(0);
Declare and create a list of Strings named list1 => List&lt;String&gt; list1 = new ArrayList&lt;String&gt;();
Declare and create a list of integer list named list1 => List&lt;Integer&lt; list1 = new ArrayList&lt;Integer&gt;();
Get the last object in a list named list1 => list1.get(list1.size() - 1);
Declare an integer list named numList => List&lt;Integer&gt; numList = null;

27. Which index is the last element in a list called nums at?
Ans: D
A. nums.length
B. nums.length - 1
C. nums.size()
D. nums.size() - 1

28. Which of the following is a reason to use an array instead of an ArrayList?
Ans: C
A. An array has faster access to its elements than a list does.
B. An array knows it length, but a list doesn't know its length.
C. An ArrayList can allocate more space than it needs.

29. Which of the following is a reason to use an ArrayList instead of an array?
Ans: A
A. An ArrayList can grow or shrink as needed, while an array is always the same size.
B. You can use a for-each loop on an ArrayList, but not in an array.
C. You can store objects in an ArrayList, but not in an array.

30. Which of the following is the correct way to get the first value in a list called nums?
Ans: D
A. nums[0]
B. nums[1]
C. nums.first()
D. nums.get(0)
E. nums.get(1)

31. Which of the following is the correct way to set the second value in a list called nums to 5?
Ans: D
A. nums[1] = 5;
B. nums[2] = 5;
C. nums.set(5, 1);
D. nums.set(1, 5);
E. nums.set(2, 5);

32. Which of the following is the correct way to remove the value 3 from the list nums = [5, 3, 2, 1]?
Ans: C
A. nums.remove(3);
B. nums.remove(0);
C. nums.remove(1);
D. nums.remove(2);

33. Which of the following is the correct way to add 2 between the 1 and 3 in the following list nums = [1, 3, 4]?
Ans: D
A. nums.add(2, 0);
B. nums.add(2, 1);
C. nums.add(0, 2);
D. nums.add(1, 2);
E. nums.add(2, 2);

34. What will print when the following code executes?
List<Integer> list1 = new ArrayList<Integer>();
list1.add(new Integer(1));
list1.add(new Integer(2));
list1.add(new Integer(3));
list1.remove(1);
System.out.println(list1);
Ans: D
A. [2, 3]
B. [1, 2, 3]
C. [1, 2]
D. [1, 3]

35. What will print when the following code executes?
List<String> list1 = new ArrayList<String>();
list1.add("Anaya");
list1.add("Layla");
list1.add("Sharrie");
list1.set(0, "Destini");
list1.add(0, "Sarah");
System.out.println(list1);
Ans: A
A. ["Sarah", "Destini", "Layla", "Sharrie"]
B. ["Sarah", "Destini", "Anaya", "Layla", "Sharrie"]
C. ["Sarah", "Layla", "Sharrie"]
D. ["Destini", "Layla", "Sharrie", "Sarah"]

36. What would the following code return from mystery([90, -30, 50], 50)?
 public static int mystery(int[] elements, int target)
 {
   for (int j = 0; j < elements.length; j++)
   {
      if (elements[j] == target)
      {
         return j;
      }
  }
  return -1;
}
Ans: D
A. -1
B. 0
C. 1
D. 2
E. 50

37. What would the following code return from mystery([90, -30, 50], -20)?
public static int mystery(int[] elements, int target)
{
   for (int j = 0; j < elements.length; j++)
   {
      if (elements[j] == target)
      {
         return j;
      }
  }
  return -1;
}
Ans: A
A. -1
B. 0
C. 1
D. 2
E. -20

38. Consider the binarySearch method below. How many times would the while loop execute if you first do int[] arr = {2, 10, 23, 31, 55, 86} and then call binarySearch(arr,2)?
public static int binarySearch(int[] elements, int target) {
   int left = 0;
   int right = elements.length - 1;
   while (left <= right)
   {
      int middle = (left + right) / 2;
      if (target < elements[middle])
      {
         right = middle - 1;
      }
      else if (target > elements[middle])
      {
         left = middle + 1;
      }
      else {
         return middle;
      }
    }
    return -1;
}
Ans: B 
A. 1
B. 2
C. 3

39. Which sort contains a recursive call?
Ans: C
A. selection sort
B. insertion sort
C. merge sort

40. Under what condition will an ascending insertion sort execute the slowest?
Ans: 
A. If the data is already sorted in ascending order
B. If the data is already sorted in descending order
C. It will always take the same amount of time to execute

41. What is printed as a result of executing the following code segment?
List<Integer> list1 = new ArrayList<Integer>();
list1.add(new Integer(1));
list1.add(new Integer(2));
list1.add(new Integer(3));
list1.set(2, new Integer(4));
list1.add(2, new Integer(5));
list1.add(new Integer(6));
System.out.println(list1);
Ans: C 
A. [1, 2, 3, 4, 5]
B. [1, 2, 4, 5, 6]
C. [1, 2, 5, 4, 6]
D. [1, 5, 2, 4, 6]

42. Given the following code and assume that nums initially contains [0, 0, 4, 2, 5, 0, 3], what will nums contain as a result of executing numQuest?
private List<Integer> nums;

// precondition: nums.size() > 0;
// nums contains Integer objects
public void numQuest()
{
  int k = 0;
  Integer zero = new Integer(0);
  while (k < nums.size())
  {
   if (nums.get(k).equals(zero))
     nums.remove(k);
   else
      k++;
  }
}
Ans: D
A. [0, 4, 2, 5, 3]
B. [3, 5, 2, 4, 0, 0, 0]
C. [0, 0, 0, 4, 2, 5, 3]
D. [4, 2, 5, 3]
E. [0, 0, 4, 2, 5, 0, 3]

43. Which of the following best describes the behavior of process1 and process2 (shown below)?
public static List<Integer> process1(int n)
{
   List<Integer> someList = new ArrayList<Integer>();
   for (int k = 0; k < n; k++)
      someList.add(k);
   return someList;
}

public static List<Integer> process2(int n)
{
   List<Integer> someList = new ArrayList<Integer>();
   for (int k = 0; k < n; k++)
      someList.add(k, k);
   return someList;
}
Ans: E
A. Both methods produce the same result, and process1 is faster than process2.
B. The two methods produce different results and take the same amount of time.
C. The two methods produce different results, and process1 is faster than process2.
D. The two methods produce different results, and process2 is faster than process1.
E. Both methods produce the same result and take the same amount of time.

44. What is printed as a result of executing the following code segment?
List<Integer> aList = new ArrayList<Integer>();
aList.add(new Integer(1));
aList.add(new Integer(2));
aList.add(1, new Integer(5));
aList.set(1, new Integer(4));
aList.add(new Integer(6));
aList.add(new Integer(3));
System.out.println(aList);
Ans: D
A. [1, 2, 5, 4, 6, 3]
B. [6, 5, 4, 3, 2, 1]
C. [1, 2, 3, 4, 5, 6]
D. [1, 4, 2, 6, 3]
E. [1, 2, 4, 6, 3]

45. What is printed as a result of executing the following code segment?
List<Integer> aList = new ArrayList<Integer>();
aList.add(new Integer(1));
aList.add(new Integer(2));
aList.remove(1);
aList.add(1, new Integer(3));
aList.set(1, new Integer(4));
aList.add(new Integer(5));
System.out.println(list);
Ans: B
A. [1, 2, 3, 4, 5]
B. [1, 4, 5]
C. [1, 4, 3, 5]
D. [2, 4, 5]
E. [2, 4, 3, 5]

46. What is printed as a result of executing the following code segment?
List<String> list1 = new ArrayList<String>();
list1.add("a");
list1.add("b");
list1.add(0,"c");
list1.add(1, "d");
list1.set(2, "e");
list1.add("f");
System.out.println(list1);

What is printed as a result of executing the following code segment?
Ans: B
A. [c, d, e, b]
B. [c, d, e, b, f]
C. [c, a, e, b, f]
D. [c, d, e, a, b, f]
E. [c, a, e, d, b, f]

47. Given the list nums = [4, 2, 3, 4, 5] what is the result after executing nums.remove(4)?
Ans: D
A. [2, 3, 4, 5]
B. [2, 3, 5]
C. [4, 2, 3, 5]
D. [4, 2, 3, 4]

48. What is printed as a result of executing the following code segment?
List<String> list1 = new ArrayList<String>();
list1.add("a");
list1.add("b");
list1.add(0,"c");
list1.set(1, "d");
list1.set(0, "e");
list1.add("b");
System.out.println(list1);

What is printed as a result of executing the following code segment?
Ans: B
A. [e, d, b]
B. [e, d, b, b]
C. [e, d, a, b, b]
D. [e, d, a, b]

49. Assume that numList has been initialized with the following Integer objects: [0, 1, 2, 3, 4]. What is the value of numList after mystery(5) executes?
private List<Integer> numList;
public void mystery(int n)
{
    for (int i = 0; i < n; i++)
    {
        Integer obj = numList.remove(0);
        numList.add(obj);
    }
}
Ans: C
A. [4, 3, 2, 1, 0]
B. [1, 2, 3, 4, 0]
C. [0, 1, 2, 3, 4]
D. [2, 3, 4, 0, 1]
E. [4, 0, 1, 2, 3]

50. Assume that numList has been initialized with the following Integer objects: [5, 7, 8, 12]. Which of the following shows the values in numList after a call to mystery(11)?
private List<Integer> numList;
public void mystery(int value)
{
    int i = 0;
    while (i < numList.size() && numList.get(i) < value)
    {
        i++;
    }
    numList.add(i, value);
}
Ans: B
A. [5, 7, 8, 12]
B. [5, 7, 8, 11, 12]
C. [11, 5, 7, 8, 12]
D. [5, 7, 8, 12, 11]
E. [5, 7, 11, 8, 12]

51. Which of the following correctly shows the iterations of an ascending (from left to right) insertion sort on an array with the following elements: {7,3,8,5,2}?
Ans: A
A. {3,7,8,5,2}, {3,7,8,5,2}, {3,5,7,8,2}, {2,3,5,7,8}
B. {2,3,8,5,7}, {2,3,8,5,7}, {2,3,5,8,7}, {2,3,5,7,8}
C. {3,7,8,5,2}, {3,5,7,8,2}, {2,3,5,7,8}
D. {2,3,8,5,7}, {2,3,5,8,7}, {2,3,5,7,8}
E. {2,7,3,8,5}, {2,3,7,8,5}, {2,3,5,7,8}

52. What is printed when the following main method is executed?
public class Searcher
{
    private int[] arr = {1,3,5,8,9};

    public int mystery(int low, int high, int num)
    {
        int mid = (low + high) / 2;
        if (low > high) {
            return -1;   }
        else if (arr[mid] < num) {
            return mystery(mid + 1, high, num);   }
        else if (arr[mid] > num) {
            return mystery(low, mid - 1, num);   }
        else
            return mid;
    }

    public static void main(String[] args)
    {
        Searcher s = new Searcher();
        System.out.println(s.mystery(0,4,3));
    }
}
Ans: C
A. -1
B. 0
C. 1
D. 2
E. 3

53. Which of the following correctly shows the iterations of an ascending (from left to right) selection sort on an array with the following elements: {10, 6, 3, 2, 8}?
Ans: D
A. {6,10,3,2,8}, {3,6,10,2,8}, {2,3,6,10,8}, {2,3,6,8,10}
B. {6,10,3,2,8}, {3,6,10,2,8}, {2,3,6,8,10}
C. {2,6,3,10,8}, {2,3,6,10,8}, {2,3,6,8,10}
D. {2,6,3,10,8}, {2,3,6,10,8}, {2,3,6,10,8}, {2,3,6,8,10}

54. Which of the following could be used to replace // missing code // in the code so that the method always sorts the array elem in ascending order?
public class Searcher
{

    public static void sort(int[] elem)
            {
        for (int j = 0; j < elem.length - 1; j++)
        {
            int minIndex = j;

            for (// missing code //)
            {
                if (elem [k] < elem [minIndex])
                {
                    minIndex = k;
                }
            }
            int temp = elem[j];
            elem[j] = elem[minIndex];
            elem[minIndex] = temp;
        }
    }

    public static void main(String[] args)
    {
        int[] nums = {28, -3, 2, 14, 30};
        Searcher.sort(nums);
    }
}
Ans: B
A. int k = j - 1; k >= 0; k--
B. int k = j + 1; k < elem.length; k++
C. int k = j; k < elem.length; k++
D. int k = j; k >= 0; k--
E. int k = j - 1; k > 0; k--

55. What would test return if a = {1,2,3,4} and v = 3?
public static int test(int[] a, int v)
{
    for (int i = 0; i < a.length; i++)
    {
        if (a[i] == v)
            return i;
        else return -1;
    }
}
A. -1
B. 0
C. 1
D. 2
E. The code will not compile

56. What is in the list nums if it initially contained {5, 3, 1} and the following code is executed?
nums.add(6);
nums.add(0,4);
nums.remove(1);
Ans: B
A. [5, 3, 1, 6]
B. [4, 3, 1, 6]
C. [4, 3, 6]
D. [5, 3, 6]
E. [4, 5, 3, 6]

57. Assume that nums has been created as an ArrayList object and initially contains the following Integer values: [0, 0, 4, 2, 5, 0, 3, 0]. What will nums contain as a result of executing the following method numQuest?
private List<Integer> nums;

//precondition: nums.size() > 0
//nums contains Integer objects
public void numQuest() {
   int k = 0;
   Integer zero = new Integer(0);
   while (k < nums.size()) {
      if (nums.get(k).equals(zero))
         nums.remove(k);
      k++;
   }
}
Ans: E
A. [0, 0, 4, 2, 5, 0, 3, 0]
B. [3, 5, 2, 4, 0, 0, 0, 0]
C. [0, 0, 0, 0, 4, 2, 5, 3]
D. [4, 2, 5, 3]
E. [0, 4, 2, 5, 3]

58. What is printed when the following main method is executed? The break; statement used in this code breaks out of or terminates the loop at that point. It is not used on the AP CS A exam.
public class AlphaSort
{

    public static void main(String[] args)
    {
        int i, j;
        String key;
        String[] letters = {"E","D","C","B","A","B"};
        for (j = 1; j < letters.length; j++)
        {
            key = letters[j];
            i = j - 1;
            while (i >= 0)
            {
                if (key.compareTo(letters[i]) > 0)
                {
                    break;
                }
                letters[i + 1] = letters[i];
                i--;
            }
            letters[i + 1] = key;
        }
        for (int t = 0; t < letters.length; t++)
        {
            System.out.print((letters[t]) + "");
        }
    }
}
Ans: C
A. A B B C D
B. E D C B B A
C. A B B C D E
D. E D C B A B
E. E D C B B

59. What is printed when the following main method is executed?
public class NumberCount
{
    public static void main(String[] args)
    {
        int count = 0;
        int[] numbers = {-5,4,-5,3,-2,-4};
        for (int j = 0; j < numbers.length; j++)
        {
            if(numbers[j] < 0 && numbers[j] % 2 != 0)
            {
                count++;
            }
        }
    System.out.println(count);
    }
}
Ans: B
A. 4
B. 2
C. 12
D. 1

60. What is printed when the following main method is executed?
public class GuestList
{
    public static void main(String[] args)
    {
        int count = 0;
        String[] guestList = {"Anna", "Briana", "Alex", "John"};
        String subj1 = null;
        String subj2 = null;
        for (int j = 0; j < guestList.length; j++)
        {
            subj1 = guestList[j].substring(0,1);
            subj2 = guestList[j].substring(guestList[j].length()-1);
            if(subj1.equalsIgnoreCase(subj2))
            {
                count--;
            }
            else if(subj1.equalsIgnoreCase("a"))
            {
                count++;
            }
        }
        System.out.println(count);
    }
}
Ans: D
A. -3
B. -4
C. 4
D. 0

61. What is printed when the following main method is executed?
public class OddEvenMod
{
    public static void main(String[] args)
    {
        int[] arr = {8,7,7,3,4,1};
        for (int i = 0; i < arr.length; i++)
        {
            if(arr[i] % 2 == 0)
            {
                int temp = arr[0];
                arr[0] = arr[i];
                arr[i] = temp;
            }
        }
        for (int t = 0; t < arr.length; t++)
        {
            System.out.print((arr[t]) + ",");
        }
    }
}
Ans: B
A. 8,7,7,3,4,1
B. 4,7,7,3,8,1
C. 4,8,7,1,3,7
D. 1,8,7,7,4,3

62. What is printed when the following main method is executed?
public class PrimeOrNot
{
    private static boolean check(int n)
    {
        for(int i = 2; i < n; i++)
        {
            if(n % i == 0)
                return false;
        }
        return true;
    }

    public static void main(String[] args)
    {
        int[] arr = {5,3,2,9,3,4};
        for (int i = 0; i < arr.length; i++)
        {
            if(check(arr[i]))
            {
                int temp = arr[0];
                arr[0] = arr[i];
                arr[i] = temp;
            }
        }
        for (int t = 0; t < arr.length; t++)
        {
            System.out.print((arr[t]) + ",");
        }
    }
}
Ans: A
A. 3,5,3,9,2,4,
B. 4,5,2,3,9,3,
C. 5,3,2,9,3,4,
D. 2,3,5,9,3,

63. What is printed when the following main method is executed?
public class GradeSort
{
   public static void main(String[] args)
   {
        String[] names = {"Anna","John","Billy","Bob","Roger","Dominic"};
        int[] grades = {93,100,67,84,86, 93};
        int i, j, first, temp;
        String temp2;
        for (i = grades.length - 1; i > 0; i--)
        {
            first = 0;
            for (j = 1; j <= i; j++)
            {
                if (grades[j] < grades[first])
                    first = j;
            }
            temp = grades[first];
            grades[first] = grades[i];
            grades[i] = temp;
            temp2 = names[first];
            names[first] = names[i];
            names[i] = temp2;
        }
        for (int t = 0; t < names.length; t++)
        {
            System.out.print((names[t]) + " ");
        }
   }
}
Ans: B
A. Anna John Billy Bob Roger Dominic
B. John Dominic Anna Roger Bob Billy
C. Billy Bob Roger Anna Dominic John
D. Anna John Billy Bob Roger

64. What is printed when the following main method is executed?
public class DivisibleBy2or3
{
    private static boolean divCheck(int n)
    {
        if(n % 2 == 0 || n % 3 == 0)
        {
          return true;
        }
        return false;
    }

    public static void main(String[] args)
    {
        int[] arr = {6,7,17,3,2,9,1,5};
        for (int i = 0; i < arr.length; i++)
        {
            if(divCheck(arr[i]))
            {
                int temp = arr[0];
                arr[0] = arr[i];
                arr[i] = temp;
            }
        }
        for (int t = 0; t < arr.length; t++)
        {
            System.out.print((arr[t]) + " ");
        }
    }
}
A. 6 7 17 3 2 9 1 5
B. 9 6 3 2 3 1 5 17
C. 5 1 2 3 6 17 7 9
D. 9 7 17 6 3 2 1 5